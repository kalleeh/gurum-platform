AWSTemplateFormatVersion: "2010-09-09"
Description: >

    This template deploys a VPC, with a pair of public and private subnets spread
    across two Availabilty Zones. It deploys an Internet Gateway, with a default
    route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
    and default routes for them in the private subnets.

    It then deploys a highly available ECS cluster using an AutoScaling Group, with
    ECS hosts distributed across multiple Availability Zones.

    Last Modified: 11th April 2018
    Modified By: Karl Wallbom <wallbomk@amazon.com>
    Author: Paul Maddox <pmaddox@amazon.com>

Parameters:

    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 0

Conditions:

    ASGExists:
        !Not [!Equals [!Ref ClusterSize, "0"]]

Resources:

    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: infrastructure/vpc.yaml
            Parameters:
                EnvironmentName:    !Ref AWS::StackName
                VpcCIDR:            10.180.0.0/16
                PublicSubnet1CIDR:  10.180.8.0/21
                PublicSubnet2CIDR:  10.180.16.0/21
                PrivateSubnet1CIDR: 10.180.24.0/21
                PrivateSubnet2CIDR: 10.180.32.0/21

    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: infrastructure/load-balancers.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                Subnets: !GetAtt VPC.Outputs.PublicSubnets

    ECS:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: infrastructure/ecs-cluster.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                InstanceType: t2.small
                ClusterSize: !Ref ClusterSize
                VPC: !GetAtt VPC.Outputs.VPC
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                LoadBalancerSecurityGroup: !GetAtt ALB.Outputs.LoadBalancerSecurityGroup

    LifecycleHook:
        Type: AWS::CloudFormation::Stack
        Condition: ASGExists
        Properties:
            TemplateURL: infrastructure/lifecyclehook.yaml
            Parameters:
                Cluster: !GetAtt ECS.Outputs.Cluster
                ECSAutoScalingGroupName: !GetAtt ECS.Outputs.ECSAutoScalingGroupName

    ServiceDiscovery:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: infrastructure/service-discovery.yaml
            Parameters:
                NamespaceName: !GetAtt ECS.Outputs.Cluster
                VPC: !GetAtt VPC.Outputs.VPC

    AppDeploymentRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${AWS::StackName}-AppDeploymentRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "cloudformation.amazonaws.com"
                        }
                    }]
                }
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/PowerUserAccess
              - arn:aws:iam::aws:policy/IAMFullAccess
