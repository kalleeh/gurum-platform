# This is a sample, non-production-ready template.
#
# © 2019 Amazon Web Services, In​c. or its affiliates. All Rights Reserved.
#
# This AWS Content is provided subject to the terms of the
# AWS Customer Agreement available at http://aws.amazon.com/agreement
# or other written agreement between Customer and either
# Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  This template deploys an ECS cluster to the provided VPC and subnets
  using an Auto Scaling Group

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  EcsAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  EcsInstanceType:
    Type: CommaDelimitedList
    Description: >
      Specifies the EC2 instance type for your container instances.
      Defaults to t3.medium
    Default: t3.medium
    ConstraintDescription: must be a valid EC2 instance type.

  EcsClusterMaxSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 0

  VPC:
    Description: Choose which VPC the security groups should be deployed to
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  LoadBalancerSecurityGroup:
    Description: Security Group to allow inbound communication to the hosts from the ALB
    Type: AWS::EC2::SecurityGroup::Id

Conditions:
  CreateEC2s: !Not [!Equals [!Ref EcsClusterMaxSize, 0]]

Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EnvironmentName

  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: CreateEC2s
    Properties:
      ImageId: !Ref EcsAMI
      InstanceType: !Select [0, !Ref EcsInstanceType]
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EcsInstanceProfile
      SecurityGroups:
        - !Ref EcsHostSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config;echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;

  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: CreateEC2s
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref EcsInstanceLc
      MinSize: '0'
      MaxSize: !Ref EcsClusterMaxSize
      DesiredCapacity: '0'
      Tags:
        - Key: Name
          Value: !Sub 'ECS Instance - ${AWS::StackName}'
          PropagateAtLaunch: true
        - Key: Description
          Value: 'This instance is the part of an ECS Auto Scaling group'
          PropagateAtLaunch: true

  # # Custom Resource to enable CIS Standards in Security Hub
  # EcsCapacityProvider:
  #   Type: Custom::EcsCapacityProvider
  #   Condition: CreateEC2s
  #   Properties:
  #     ServiceToken: !GetAtt CreateEcsCapacityProvider.Arn
  #     EnvironmentName: !Ref EnvironmentName
  #     AutoScalingGroup: !Ref EcsInstanceAsg
  #     TargetCapacity: 80

  # CreateEcsCapacityProvider:
  #   Type: AWS::Serverless::Function
  #   Condition: CreateEC2s
  #   Properties:
  #     Handler: index.handler
  #     Runtime: python3.7
  #     Policies:
  #       - Statement:
  #         - Effect: Allow
  #           Action:
  #             - ecs:CreateCapacityProvider
  #             - autoscaling:CreateOrUpdateTags
  #             - autoscaling:DescribeAutoScalingGroups
  #             - autoscaling:UpdateAutoScalingGroup
  #           Resource: "*"
  #     InlineCode: |
  #       import boto3
  #       import cfnresponse

  #       ecs_client = boto3.client("ecs")
  #       asg_client = boto3.client("autoscaling")

  #       def handler(event, context):
  #           responseData = {}
  #           physicalResourceId = {}

  #           if event['RequestType'] == 'Create':
  #             environment_name = event['ResourceProperties']['EnvironmentName']
  #             asg_name = event['ResourceProperties']['AutoScalingGroup']
  #             target_capacity = int(event['ResourceProperties']['TargetCapacity'])

  #             asg = asg_client.describe_auto_scaling_groups(AutoScalingGroupNames=[asg_name])
  #             asg_arn = asg['AutoScalingGroups'][0]['AutoScalingGroupARN']
  #             cap_provider_name = '{}-capacity-provider'.format(environment_name)

  #             try:
  #               response = asg_client.update_auto_scaling_group(
  #                   AutoScalingGroupName=asg_name,
  #                   NewInstancesProtectedFromScaleIn=True,
  #               )
  #             except Exception as e:
  #               responseData['reason'] = "Cannot create Capacity Provider: " + str(e)
  #               cfnresponse.send(event, context, cfnresponse.FAILED, responseData, physicalResourceId)
  #               return

  #             try:
  #               response = ecs_client.create_capacity_provider(
  #                   name=cap_provider_name,
  #                   autoScalingGroupProvider={
  #                       'autoScalingGroupArn': asg_arn,
  #                       'managedScaling': {
  #                           'status': 'ENABLED',
  #                           'targetCapacity': target_capacity
  #                       },
  #                       'managedTerminationProtection': 'ENABLED'
  #                   },
  #                   tags=[
  #                       {
  #                           'key': 'Name',
  #                           'value': cap_provider_name
  #                       },
  #                   ]
  #               )

  #               cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, physicalResourceId)
  #             except Exception as e:
  #               responseData['reason'] = "Cannot create Capacity Provider: " + str(e)
  #               cfnresponse.send(event, context, cfnresponse.FAILED, responseData, physicalResourceId)
  #               return
  #           elif event['RequestType'] == 'Update' or event['RequestType'] == 'Delete':
  #             responseData['reason'] = 'No changes required.'
  #             cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, physicalResourceId)

  # This security group defines who/where is allowed to access the ECS hosts directly.
  # By default we're just allowing access from the load balancer.  If you want to SSH
  # into the hosts, or expose non-load balanced services you can open their ports here.
  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateEC2s
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      SecurityGroupIngress:
        # Only allow inbound access to ECS from the ELB
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECS-Hosts-SecurityGroup

  # This IAM Role is attached to all of the ECS hosts. It is based on the default role
  # published here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  #
  # You can add other IAM policy statements here to allow access from your ECS hosts
  # to other AWS services. Please note that this role will be used by ALL containers
  # running on the ECS host.

  EcsRole:
    Type: AWS::IAM::Role
    Condition: CreateEC2s
    Properties:
      Path: /
      RoleName: !Sub ${EnvironmentName}-EcsRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                Resource: '*'

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateEC2s
    Properties:
      Path: /
      Roles:
        - !Ref EcsRole

  EcsServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Condition: CreateEC2s
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - application-autoscaling:*
                - cloudwatch:DescribeAlarms
                - cloudwatch:PutMetricAlarm
                - ecs:DescribeServices
                - ecs:UpdateService
              Resource: '*'

  ############################
  #      SSM Parameters      #
  ############################

  ECSClusterParam:
      Type: AWS::SSM::Parameter
      Properties:
          Name: /gurum/platform/ecs
          Type: String
          Value: !Ref EcsCluster
          Description: Gurum Platform ECS Cluster.

  ECSAutoScalingGroupParam:
      Condition: CreateEC2s
      Type: AWS::SSM::Parameter
      Properties:
          Name: /gurum/platform/ecs-asg
          Type: String
          Value: !Ref EcsInstanceAsg
          Description: Name of Auto Scaling Group.

Outputs:
  EcsCluster:
    Description: A reference to the ECS cluster
    Value: !Ref EcsCluster

  EcsServiceAutoScalingRole:
    Condition: CreateEC2s
    Description: A reference to ECS service auto scaling role
    Value: !GetAtt EcsServiceAutoScalingRole.Arn

  ECSAutoScalingGroupName:
    Condition: CreateEC2s
    Description: A reference to ECS AutoScaling Group Name
    Value: !Ref EcsInstanceAsg
