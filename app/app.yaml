AWSTemplateFormatVersion: "2010-09-09"
Description: Platform App on Shared Load Balancer

Parameters:

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 1

    Priority:
        Description: The Application Load Balancer rule priority
        Type: Number
        Default: 1

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    HealthCheckPath:
        Description: The health check path to register with the Application Load Balancer
        Type: String
        Default: /health


    DockerImage:
        Description: The health check path to register with the Application Load Balancer
        Type: String
        Default: /health
Resources:

    Service:
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties:
            ServiceName:
              Ref: AWS::StackName
            Cluster: !ImportValue Cluster
            DeploymentConfiguration:
              MaximumPercent: 200
              MinimumHealthyPercent: 50
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LaunchType: FARGATE
            LoadBalancers:
                - ContainerName: web
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroup
            NetworkConfiguration:
              AwsvpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - Fn::GetAtt:
                      - ApplicationServiceSecurityGroup
                      - GroupId
                Subnets:
                  - !ImportValue PrivateSubnet1
                  - !ImportValue PrivateSubnet2

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family:
              Ref: AWS::StackName
            Cpu: "1024"
            Memory: "2048"
            NetworkMode: awsvpc
            RequiresCompatibilities:
              - FARGATE
            ExecutionRoleArn:
              Fn::GetAtt:
                - ApplicationContainerRole
                - Arn
            ContainerDefinitions:
                - Name: web
                  Essential: true
                  Image: !Ref DockerImage
                  Memory: 128
                  PortMappings:
                    - ContainerPort: 80
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: web

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    ApplicationServiceSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName:
          Fn::Sub: "ApplicationServiceSecurityGroup-${AWS::StackName}"
        GroupDescription:
          Fn::Sub: "Application Service Security Group (${AWS::StackName})"
        SecurityGroupIngress:
          - CidrIp: "0.0.0.0/0"
            FromPort: "80"
            ToPort: "80"
            IpProtocol: tcp
        VpcId: !ImportValue VPC

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          Name:
            Ref: AWS::StackName
          TargetType: ip
          Port: 80
          Protocol: HTTP
          VpcId: !ImportValue VPC
          TargetGroupAttributes:
            - Key: deregistration_delay.timeout_seconds
              Value: 50
          Matcher:
              HttpCode: 200-299
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: !Ref HealthCheckPath
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 5
          HealthyThresholdCount: 2

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: !Ref Priority
            Conditions:
                - Field: path-pattern
                  Values:
                    - !Sub '/${AWS::StackName}*'
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    ApplicationContainerRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName:
          Fn::Sub: "ApplicationContainerRole-${AWS::StackName}"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        AssumeRolePolicyDocument:
          Version: "2008-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole

Outputs:
  Endpoint:
    Value: !Sub
      - ${Url}/${AWS::StackName}
      - { Url: !ImportValue LoadBalancerUrl }
